#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+BEGIN_COMMENT
#+STYLE: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+END_COMMENT
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil 
#+TITLE: Logic Gates
#+AUTHOR: Stephen Brown

#+BEGIN_HTML
<div class=ribbon>
<a href="https://github.com/stsb11/gcse_theory">Fork me on GitHub</a>
</div>
<center>
<img src='./img/and.png' width=50%>
</center>
#+END_HTML

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

e* Introduction
[[file:img/pic.jpg]]
:PROPERTIES:
:HTML_CONTAINER_CLASS: intro
:END:
** What are PIC chips?
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:
Peripheral Interface Controllers are small silicon chips which can be programmed to perform useful tasks.
In school, we tend to use Genie branded chips, like the C08 model you will use in this project. Others (e.g. PICAXE) are available.
PIC chips allow you connect different inputs (e.g. switches) and outputs (e.g. LEDs, motors and speakers), and to control them using flowcharts.
Chips such as these can be found everywhere in consumer electronic products, from toasters to cars. 

While they might not look like much, there is more computational power in a single PIC chip used in school than there was in the space shuttle that went to the moon in the 60's!
** When would I use a PIC chip?
Imagine you wanted to make a flashing bike light; using an LED and a switch alone, you'd need to manually push and release the button to get the flashing effect. A PIC chip could be programmed to turn the LED off and on once a second.
In a board game, you might want to have an electronic dice to roll numbers from 1 to 6 for you. 
In a car, a circuit is needed to ensure that the airbags only deploy when there is a sudden change in speed, AND the passenger is wearing their seatbelt, AND the front or rear bumper has been struck. PIC chips can carry out their instructions very quickly, performing around 1000 instructions per second - as such, they can react far more quickly than a person can. 
* Introduction
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
- Whether programming a PIC chip or designing a circuit to use components, a good understanding of the basic logic gates will make your work easier. Electronic circuits, computers, games consoles and mobile ‘phones all use logic gates for their decision making processes. 
- Logic gates typically operate using wither one or two inputs, which are either off (usually referred to as being “logic low” or 0), or on (referred to as being “high” or 1). 
- In electronics, 5v usually indicates a logical high, and 0V for a logic low state. 


- The *AND* gate only gives a logic high when both its inputs are high. i.e. Input 1 AND input 2 both need to be high. 
#+BEGIN_HTML
<center>
<object data="js/AND.html" width='200px' height='100px'></object>
</center>
#+END_HTML
- Some questions ask you to draw a truth table. This is a table which shows all the possible permutations of the inputs. A and B are used to denote inputs, and Q is the output value. In the first row here, we can see that when both the inputs are turned off (are low), the output is also low. The truth table for the AND gate is:

| <c> | <c> | <c> |
| A   | B   | Q   |
|-----+-----+-----|
| 0   | 0   | 0   |
| 0   | 1   | 0   |
| 1   | 0   | 0   |
| 1   | 1   | 1   |

- The *OR* gate gives a logic high when either (or both) of its inputs are high. i.e. Input 1 OR input 2 OR both are high. 
#+BEGIN_HTML
<center>
<object data="js/OR.html" width='200px' height='100px'></object>
</center>
#+END_HTML
| <c> | <c> | <c> |
| A   | B   | Q   |
|-----+-----+-----|
| 0   | 0   | 0   |
| 0   | 1   | 1   |
| 1   | 0   | 1   |
| 1   | 1   | 1   |

- The *NOT* gate is unique in having only one input. Sometimes called the invertor gate, it inverts whatever input is sent into it. 
#+BEGIN_HTML
<center>
<object data="js/NOT.html" width='200px' height='100px'></object>
</center>
#+END_HTML
| <c> | <c> |
|   A |   Q |
|-----+-----|
|   0 |   1 |
|   1 |   0 |

* Recap
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Past Paper Questions
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- *Q2, June 2007.* This question is about using logic gates to control a train door. 
  - (i) Complete the following by naming the logic gates shown and drawing the symbol where appropriate.
[[./img/2007_q2.png]]
- (ii) Complete the truth tables for the three logic gates.
- It has been decided to operate a train door using push button switches. In this system, three push button switches operate the system (inside/ outside/ driver control).
- The door is opened by passengers pressing a push button switch next to the door. The door opening device operates and the door opens. The door should open when push button switch 1 or push button switch 2 is pressed and the driver operates a control.
[[./img/2007_q21.png]]
- Construct a logic circuit to open the door using two 2-input logic gates to complete the logic circuit. Marks will be awarded for:
  - Logic gate symbols /(2 marks)/
  - Inputs to gates /(4 marks)/
  - Output to door /(1 mark)/
  - Neatness. /(2 marks)/


- *June 2008, Q5.* This question is about logic and operating a moving target. A stall holder gives a prize if the customer knocks down all three targets. 
[[./img/2008_q5.png]]
- In this system:
  - 3 push switches operate the system,
  - There is a push switch attached to each target,
  - The bulb should only come ON when all three targets are knocked down.
[[./img/2008_q51.png]]

- (a) Using two logic gates, construct a circuit in the space below to join the three push switches to the bulb. Each logic gate should have two inputs. Marks will be awarded for:

  - logic gates symbols (2 marks)
  - inputs to gates (4 marks)
  - output to bulb (1 mark)
  - quality of drawing. (1 mark)
[[./img/2008_q52.png]]

- (b) Design a system to stand the target back up automatically when the operator resets the game. Draw a mechanical or pneumatic system in Space B that will stand the target back up. The system will need to allow the target to fall when hit.
[[./img/2008_q5b.png]]

- The side view of only one target is shown above, which is in the down position the target will remain upright against the stop some of the detail of the target has been omitted for clarity.

- Marks will be awarded for:
  - a system able to lift the target to the vertical (3 marks)
  - a system able to allow the target to fall when hit (3 marks)
  - a suitable mounting of the system (1 mark)
  - the quality of notes describing the operation. (4 marks)


- *June 2011, Q1d.* The cabin light in a car should only come ON when both of the following occur:
  - either car door opens
  - it is dark

- Using only logic gates, design a logic circuit that will operate the interior light correctly. Marks will be awarded for:
  - logic gates symbols /(3 marks)/
  - inputs to gates /(5 marks)/
  - output to light /(1 mark)/
  - neatness. /(1 mark)/
[[./img/2011_q1d.png]]

- *June 2013, Q5.* You are advised to spend about 15 minutes on this question. This question is about a system that automatically turns on a boat’s pump. The diagram below shows a boat with a pump room and two other rooms.
[[./img/2013_q5.png]]

- If water is present in either Room 1 or Room 2, and the trapdoor to the pump room is closed, the pump automatically starts working. The diagram here shows the logic for the boat pump system.
[[./img/2013_q5a.png]]
- (a) Name the gates in the logic diagram. 
  - Gate 1:
  - Gate 2:
  - Gate 3: /(3 marks)/

- (b) If water is present in either Room 1 or Room 2 and the trapdoor to the pump room is closed, the pump automatically starts working. Complete the following truth table for the logic circuit shown above. (4 marks)
[[./img/2013_q5b.png]]
- (c) Use notes and sketches to show a suitable sensor for sensing that water is present in a room. /(4 marks)/

- (d) Suggest two advantages of using a Microcontroller (PIC) rather than discrete Logic Integrated Circuits (ICs) in an electronic product.
  - Advantage 1:
  - Advantage 2: /(4 marks)/

[[file:index.html][Return to homepage]]
